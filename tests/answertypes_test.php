<?php
/*
 * Created on 4.12.2005
 * @author Jakub Holy
 * 
 * IMPORTANT: This file is expected to be included in a file in the root
 * directory of uccass.
 */

//error_reporting(E_ALL);

if (! defined('SIMPLE_TEST')) {
	define('SIMPLE_TEST', 'tests/simpletest/');
}
require_once(SIMPLE_TEST . 'unit_tester.php');
require_once(SIMPLE_TEST . 'reporter.php');

require_once('classes/answertypes.class.php');	// must be relative to uccass root dir
 
/**
 * Test UCCASS_AnswerTypes
 */
class TestOfAnswerTypes extends UnitTestCase 
{
	/**@var object an instance of UCCASS_Main - I need to access its configuration. */
	var $uccassMain;	
	/** The UCCASS_AnswerTypes under test. */
	var $answerTypes;
	/** A mock ADOConnection. */
	var $mockADOConnection;
	/** An associative array representing the input form. */
	var $input;
	
	/**
	 * Create new TestOfAnswerTypes.
	 * @param object $uccassMain - an instance of UCCASS_Main - I need to access
	 * its configuration
	 * @param string $MockADOConnectionClass Name of the class generated by
	 * Mock::generate('ADOConnection') - I need to create an instance of the
	 * mock.
	 * 'Mock::generate('ADOConnection');' must be called in the file we're
	 * called from.
	 */
	function TestOfAnswerTypes(&$uccassMain, $MockADOConnectionClass = 'MockADOConnection')
	{
		$this->uccassMain 			= &$uccassMain;
		$this->mockADOConnection = eval("return new $MockADOConnectionClass(\$this);");
	}// constructor
	
    
    function setUp() 
    { 
    	$this->answerTypes = &new UCCASS_AnswerTypes();
    	$this->mockADOConnection = &new MockADOConnection($this);
    	$this->answerTypes->db = &$this->mockADOConnection; 
    	//
    	$this->input = array(
    		'name' => 'typeName',
    		'type' => 'MS',			// Multiple choice Single answer
    		'label' => 'typeLabel',
    		'sid' => 111,			// survey id
    		'is_dynamic' => 0,
    		// answers
    		'value' => array('answer0', 'answer1'),
    		'numeric_value' => array(0, 1),
    		'image' => array('image0.jpg', 'image1.jpg')
    	);
    }
    
    function tearDown() {}
    
    /** Test db_insert_answer_type when no database error occures. */
    function test_db_insert_answer_type_ok()
    {
    	// Set up the mock ADOConnection
    	// Insert 1 answer type: GenID + Execute an insert
    	$input =& $this->input;
    	$answerId = 99;
    	$prefix = $this->uccassMain->CONF['db_tbl_prefix'];

    	$this->mockADOConnection->expectArgumentsAt(0, 'GenID',array($prefix.'answer_types_sequence')); // * => any prefix
    	$this->mockADOConnection->setReturnValueAt(0, 'GenID', $answerId);
    	$query = "INSERT INTO {$prefix}answer_types (aid, name, type, label, sid, is_dynamic) VALUES"
                 . "($answerId, {$input['name']},{$input['type']},{$input['label']},{$input['sid']}, {$input['is_dynamic']})";
        $this->mockADOConnection->expectArgumentsAt(0,'Execute',array($query));
        $this->mockADOConnection->setReturnValue('Execute', new ADORecordSet(0)); // for all calls to Execute
             
    	// Insert 2 answer values: 2* (GenID + Execute an insert)
    	$answerValuesIds = array(1000,1001);
    	$this->mockADOConnection->expectArgumentsAt(1, 'GenID',array($prefix.'answer_values_sequence')); // * => any prefix    	
    	$this->mockADOConnection->setReturnValueAt(0, 'GenID', $answerValuesIds[0]);
    	$this->mockADOConnection->expectArgumentsAt(2, 'GenID',array($prefix.'answer_values_sequence')); // * => any prefix
    	$this->mockADOConnection->setReturnValueAt(1, 'GenID', $answerValuesIds[1]);
        $query = "INSERT INTO {$prefix}answer_values (avid, aid, value, numeric_value, image) VALUES ";
        for($x = 0; $x < 2; $x++) 
        {
        	$sql = "($answerValuesIds[$x],$answerId,{$input['value'][$x]},{$input['numeric_value'][$x]},{$input['image'][$x]})";
        	$this->mockADOConnection->expectArgumentsAt(1+$x, 'Execute',array('*'));
        	//$this->mockADOConnection->setReturnValueAt($x,'Execute', new ADORecordSet(0));
        }
        
        // The test itself
        $this->assertTrue( $this->answerTypes->db_insert_answer_type($input) );
        
        // Verify the number of calls
    	$this->mockADOConnection->tally(); // check we got the expected calls
    	
    } // test_db_insert_answer_type_ok
   
}
?>
